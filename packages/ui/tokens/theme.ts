import { colour } from "./colours";

export type Theme = "light" | "dark";

export const themeVariables = {
  backgroundColourPrimary: "--background-colour-primary",
  backgroundColourSecondary: "--background-colour-secondary",
  borderColour: "--border-colour",
  separatorColour: "--separator-colour",
  borderColourDisabled: "--border-colour-disabled",
  borderColourHover: "--border-colour-hover",
  borderColourPressed: "--border-colour-pressed",
  buttonBackgroundColourDisabled: "--button-background-disabled",
  buttonBackgroundColour: "--button-background",
  buttonBackgroundColourHover: "--button-background-hover",
  buttonBackgroundColourPressed: "--button-background-pressed",
  fieldBackgroundColour: "--field-background",
  fieldTextColour: "--field-text-colour",
  focusRingColour: "--focus-ring-colour",
  fontMono: "--font-mono",
  fontSans: "--font-sans",
  fontSerif: "--font-serif",
  highlightBackgroundColourHover: "--highlight-bg-hover",
  highlightBackgroundColourPressed: "--highlight-bg-pressed",
  highlightBackgroundColourSelected: "--highlight-bg-selected",
  highlightBackgroundColourSelectedInvalid: "--highlight-bg-selected-invalid",
  highlightBackgroundColourSelectedHover: "--highlight-bg-selected-hover",
  highlightBackgroundColourSelectedPressed: "--highlight-bg-selected-pressed",
  highlightColourSelected: "--highlight-colour-selected",
  highlightColourSelectedPressed: "--highlight-colour-selected-pressed",
  invalidColour: "--invalid-colour",
  invalidColourPressed: "--invalid-colour-pressed",
  linkColour: "--link-colour",
  linkColourDisabled: "--link-colour-disabled",
  linkColourHover: "--link-colour-hover",
  linkColourPressed: "--link-colour-pressed",
  overlayBackgroundColour: "--overlay-background",
  textColour: "--text-colour",
  textColourDisabled: "--text-colour-disabled",
  textColourHover: "--text-colour-hover",
  textColourPlaceHolder: "--text-colour-placeholder",
} as const;

export type ThemeVariable = (typeof themeVariables)[keyof typeof themeVariables];

export const themed = (key: ThemeVariable) => `var(${key})`;

export type ThemeType = "preferred" | "forced";

export const themes: Record<ThemeType, Record<ThemeVariable, string>> = {
  forced: {
    [themeVariables.backgroundColourPrimary]: "Canvas",
    [themeVariables.backgroundColourSecondary]: "Canvas",
    [themeVariables.borderColour]: "ButtonBorder",
    [themeVariables.borderColourDisabled]: "GrayText",
    [themeVariables.borderColourHover]: "ButtonBorder",
    [themeVariables.borderColourPressed]: "ButtonBorder",
    [themeVariables.buttonBackgroundColourDisabled]: "ButtonFace",
    [themeVariables.buttonBackgroundColour]: "ButtonFace",
    [themeVariables.buttonBackgroundColourHover]: "ButtonFace",
    [themeVariables.buttonBackgroundColourPressed]: "ButtonFace",
    [themeVariables.fieldBackgroundColour]: "Field",
    [themeVariables.fieldTextColour]: "FieldText",
    [themeVariables.focusRingColour]: "Highlight",
    [themeVariables.fontMono]: `mono`,
    [themeVariables.fontSans]: "sans-serif",
    [themeVariables.fontSerif]: `serif`,
    [themeVariables.highlightBackgroundColourHover]: "",
    [themeVariables.highlightBackgroundColourPressed]: "",
    [themeVariables.highlightBackgroundColourSelected]: "Highlight",
    [themeVariables.highlightBackgroundColourSelectedInvalid]: "LinkText",
    [themeVariables.highlightBackgroundColourSelectedHover]: "Highlight",
    [themeVariables.highlightBackgroundColourSelectedPressed]: "Highlight",
    [themeVariables.highlightColourSelected]: "HighlightText",
    [themeVariables.highlightColourSelectedPressed]: "HighlightText",
    [themeVariables.invalidColour]: "LinkText",
    [themeVariables.invalidColourPressed]: "LinkText",
    [themeVariables.linkColour]: "LinkText",
    [themeVariables.linkColourDisabled]: "GrayText",
    [themeVariables.linkColourHover]: "LinkText",
    [themeVariables.linkColourPressed]: "LinkText",
    [themeVariables.overlayBackgroundColour]: "Canvas",
    [themeVariables.separatorColour]: "ButtonBorder",
    [themeVariables.textColour]: "ButtonText",
    [themeVariables.textColourDisabled]: "GrayText",
    [themeVariables.textColourHover]: "ButtonText",
    [themeVariables.textColourPlaceHolder]: "ButtonText",
  },
  preferred: {
    [themeVariables.backgroundColourPrimary]: colour("--neutral-background-primary"),
    [themeVariables.backgroundColourSecondary]: colour("--neutral-background-secondary"),
    [themeVariables.borderColour]: colour("--neutral-border"),
    [themeVariables.borderColourDisabled]: colour("--neutral-border-disabled"),
    [themeVariables.borderColourHover]: colour("--neutral-border-hover"),
    [themeVariables.borderColourPressed]: colour("--neutral-border-pressed"),
    [themeVariables.buttonBackgroundColourDisabled]: colour("--neutral-background-secondary"),
    [themeVariables.buttonBackgroundColour]: colour("--neutral-background-primary"),
    [themeVariables.buttonBackgroundColourHover]: colour("--neutral-highlight-hover"),
    [themeVariables.buttonBackgroundColourPressed]: colour("--neutral-highlight-pressed"),
    [themeVariables.fieldBackgroundColour]: colour("--neutral-background-primary"),
    [themeVariables.fieldTextColour]: colour("--neutral-colour"),
    [themeVariables.focusRingColour]: colour("--primary-colour"),
    [themeVariables.fontMono]: `Lexend, mono`,
    [themeVariables.fontSans]: `Lexend, sans-serif`,
    [themeVariables.fontSerif]: `Lexend, serif`,
    [themeVariables.highlightBackgroundColourHover]: colour("--neutral-highlight-hover"),
    [themeVariables.highlightBackgroundColourPressed]: colour("--neutral-highlight-pressed"),
    [themeVariables.highlightBackgroundColourSelected]: colour("--primary-colour"),
    [themeVariables.highlightBackgroundColourSelectedHover]: colour("--primary-colour-hover"),
    [themeVariables.highlightBackgroundColourSelectedInvalid]: colour("--red-base"),
    [themeVariables.highlightBackgroundColourSelectedPressed]: colour("--primary-colour-pressed"),
    [themeVariables.highlightColourSelected]: "#ffffff",
    [themeVariables.highlightColourSelectedPressed]: "#ffffff",
    [themeVariables.invalidColour]: colour("--red-tint"),
    [themeVariables.invalidColourPressed]: colour("--red-base"),
    [themeVariables.linkColour]: colour("--neutral-colour-muted"),
    [themeVariables.linkColourDisabled]: colour("--neutral-colour-disabled"),
    [themeVariables.linkColourHover]: colour("--neutral-colour-hover"),
    [themeVariables.linkColourPressed]: colour("--neutral-colour-pressed"),
    [themeVariables.overlayBackgroundColour]: colour("--neutral-background-primary"),
    [themeVariables.separatorColour]: colour("--neutral-border-muted"),
    [themeVariables.textColour]: colour("--neutral-colour"),
    [themeVariables.textColourDisabled]: colour("--neutral-colour-disabled"),
    [themeVariables.textColourHover]: colour("--neutral-colour-hover"),
    [themeVariables.textColourPlaceHolder]: colour("--neutral-colour-muted"),
  },
};
