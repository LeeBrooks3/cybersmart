import type { CSSObject } from "@emotion/react";

const colours = {
  neutral: {
    "0": "#fff",
    "50": "oklch(98.5% 0 0)",
    "100": "oklch(97% 0 0)",
    "200": "oklch(92.2% 0 0)",
    "300": "oklch(87% 0 0)",
    "400": "oklch(70.8% 0 0)",
    "500": "oklch(55.6% 0 0)",
    "600": "oklch(43.9% 0 0)",
    "700": "oklch(37.1% 0 0)",
    "800": "oklch(26.9% 0 0)",
    "900": "oklch(20.5% 0 0)",
    "950": "oklch(14.5% 0 0)",
    "1000": "#000",
  },
  primaryColour: {
    "300": "#8aa5ed",
    "500": "#3d69e1",
    "600": "#3054b4",
    "700": "#243f87",
  },
  secondaryColour: {
    "300": "#72e3c3",
    "500": "#15d19b",
    "600": "#10a77c",
    "700": "#0c7d5d",
  },
  red: {
    light: "oklch(0.808 0.114 19.571)",
    base: "oklch(0.637 0.237 25.331)",
    dark: "oklch(0.505 0.213 27.518)",
  },
};

const colourVariables = {
  neutralBackgroundPrimary: "--neutral-background-primary",
  neutralBackgroundSecondary: "--neutral-background-secondary",
  neutralBorderDisabled: "--neutral-border-disabled",
  neutralBorderMuted: "--neutral-border-muted",
  neutralBorder: "--neutral-border",
  neutralBorderHover: "--neutral-border-hover",
  neutralBorderPressed: "--neutral-border-pressed",
  neutralColourDisabled: "--neutral-colour-disabled",
  neutralColourMuted: "--neutral-colour-muted",
  neutralColour: "--neutral-colour",
  neutralColourHover: "--neutral-colour-hover",
  neutralColourPressed: "--neutral-colour-pressed",
  neutralHighlightHover: "--neutral-highlight-hover",
  neutralHighlightPressed: "--neutral-highlight-pressed",
  primaryColourDisabled: "--primary-colour-disabled",
  primaryColour: "--primary-colour",
  primaryColourHover: "--primary-colour-hover",
  primaryColourPressed: "--primary-colour-pressed",
  secondaryColourDisabled: "--secondary-colour-disabled",
  secondaryColour: "--secondary-colour",
  secondaryColourHover: "--secondary-colour-hover",
  secondaryColourPressed: "--secondary-colour-pressed",
  redTint: "--red-tint",
  redBase: "--red-base",
  redShade: "--red-shade",
} as const;

type Colour = (typeof colourVariables)[keyof typeof colourVariables];

export const colour = (key: Colour) => `var(${key})`;

export type ColourScheme = "light" | "dark";

export const colorSchemes: Record<ColourScheme, Record<Colour, CSSObject["color"]>> = {
  light: {
    [colourVariables.neutralBackgroundPrimary]: colours.neutral["0"],
    [colourVariables.neutralBackgroundSecondary]: colours.neutral["50"],
    [colourVariables.neutralBorder]: colours.neutral["300"],
    [colourVariables.neutralBorderDisabled]: colours.neutral["100"],
    [colourVariables.neutralBorderHover]: colours.neutral["400"],
    [colourVariables.neutralBorderMuted]: colours.neutral["200"],
    [colourVariables.neutralBorderPressed]: colours.neutral["500"],
    [colourVariables.neutralColour]: colours.neutral["800"],
    [colourVariables.neutralColourDisabled]: colours.neutral["300"],
    [colourVariables.neutralColourHover]: colours.neutral["700"],
    [colourVariables.neutralColourMuted]: colours.neutral["500"],
    [colourVariables.neutralColourPressed]: colours.neutral["800"],
    [colourVariables.neutralHighlightHover]: "rgb(0 0 0 / 0.05)",
    [colourVariables.neutralHighlightPressed]: "rgb(0 0 0 / 0.1)",
    [colourVariables.primaryColour]: colours.primaryColour["500"],
    [colourVariables.primaryColourDisabled]: colours.primaryColour["300"],
    [colourVariables.primaryColourHover]: colours.primaryColour["600"],
    [colourVariables.primaryColourPressed]: colours.primaryColour["700"],
    [colourVariables.redBase]: colours.red.base,
    [colourVariables.redShade]: colours.red.dark,
    [colourVariables.redTint]: colours.red.light,
    [colourVariables.secondaryColour]: colours.secondaryColour["500"],
    [colourVariables.secondaryColourDisabled]: colours.secondaryColour["300"],
    [colourVariables.secondaryColourHover]: colours.secondaryColour["600"],
    [colourVariables.secondaryColourPressed]: colours.secondaryColour["700"],
  },
  dark: {
    [colourVariables.neutralBackgroundPrimary]: colours.neutral["950"],
    [colourVariables.neutralBackgroundSecondary]: colours.neutral["1000"],
    [colourVariables.neutralBorder]: colours.neutral["700"],
    [colourVariables.neutralBorderDisabled]: colours.neutral["900"],
    [colourVariables.neutralBorderHover]: colours.neutral["600"],
    [colourVariables.neutralBorderMuted]: colours.neutral["800"],
    [colourVariables.neutralBorderPressed]: colours.neutral["900"],
    [colourVariables.neutralColour]: colours.neutral["200"],
    [colourVariables.neutralColourDisabled]: colours.neutral["700"],
    [colourVariables.neutralColourHover]: colours.neutral["300"],
    [colourVariables.neutralColourMuted]: colours.neutral["500"],
    [colourVariables.neutralColourPressed]: colours.neutral["200"],
    [colourVariables.neutralHighlightHover]: "rgb(255 255 255 / 0.05)",
    [colourVariables.neutralHighlightPressed]: "rgb(255 255 255 / 0.1)",
    [colourVariables.primaryColour]: colours.primaryColour["500"],
    [colourVariables.primaryColourDisabled]: colours.primaryColour["300"],
    [colourVariables.primaryColourHover]: colours.primaryColour["600"],
    [colourVariables.primaryColourPressed]: colours.primaryColour["700"],
    [colourVariables.redBase]: colours.red.base,
    [colourVariables.redShade]: colours.red.dark,
    [colourVariables.redTint]: colours.red.light,
    [colourVariables.secondaryColour]: colours.secondaryColour["500"],
    [colourVariables.secondaryColourDisabled]: colours.secondaryColour["300"],
    [colourVariables.secondaryColourHover]: colours.secondaryColour["600"],
    [colourVariables.secondaryColourPressed]: colours.secondaryColour["700"],
  },
};
